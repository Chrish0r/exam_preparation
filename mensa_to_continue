#include <stdio.h>
#include <stdlib.h>
#include <string.h>

// Notes/Hints: Skript-Folie_Seite 230 (u.a.)quasi auswaendig lernen -> ggf. aufs Whiteboard.

typedef enum {VEGETARISCH; VEGAN; GLUTENFREI; ALLERGENFREI} Kennzeichen; //enum braucht keinen Namen, weil wir es direkt auf Kennzeichen typedefen

//Datentypen
typedef struct Gericht {  //nun ueberlegen, wleche Eigenschaften unser struct hat
    int speisenr;
    int preis; //10 EUR = 1000 (cents)  - darf nicht zu Rundungsfehler kommen und auf 2 Stellen genau.
    char* name;
    int energiegehalt;
    Kennzeichen kennzeichen[4];
    struct Gericht *next; //hier muss man noch einmalig struct davor schreiben, weil das typedef noch nicht "durch/fertig" ist.
} Gericht;

int vergleiche(Gericht *links, Gericht *rechts) {
    if(links->energiegehalt == rechts -> energiegehalt) {
            strcmp(links->name, rechts->name);
        }
    else {
        if(links->energiegehalt < rechts->energiegehalt) {
            return -1;
        }
        else if(links->energiegehalt > rechts->energiegehalt) {
            return 1;
        } else {
            return 0;
        }
    }

}

sortiert_einfuegen(Gericht **anker, Gericht *neues_gericht) { //Doppelpointer, da wir nicht die Kopie der Referenz haben wollen, sondern die Adresse, wo die Referenz (Pointer) drinsteht
    while(*anker != NULL && vergleiche(*anker, neues_gericht) < 0) { // <0, da wie lexikalisch, von a nach z ordnen.
        anker = &((*anker)->next);
    }
    // ... dann in die Liste einhÃ¤ngen
    neues_gericht->next = *anker;
    *anker = neues_gericht;

}  //Diese gane Fkt-Struktur quasi auswaendig lernen: Zeile 36 bis 44.

void loesche(Gericht **anker, int gerichts_id)    //generell: bei schreiben, entfernen oder aendern Referenz uebergeben, sonst value.


int main() {
    Gericht* anfang = NULL;
    Gericht* neu1 = malloc(sizeof(Gericht));
    strcpy(neu1->name, "Feuertopf");
    neu1->energiegehalt = 120;
    neu1->kennzeichen[0] = ALLERGENFREI;
    neu1->kennzeichen[1] = VEGAN;
    neu1->preis = 250;
    neu1->speisenr = 1;
    sortiert_einfuegen(&anfang, neu1);


    //nun print-fkt. testen, loeschen-Fkt.

    return 0;
}
